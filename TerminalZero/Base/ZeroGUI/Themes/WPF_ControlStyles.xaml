<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" 
                    xmlns:ZeroGUI="clr-namespace:ZeroGUI">

    <Style x:Key="buttonTextStyle" TargetType="Button">
        <Setter Property="FontSize" Value="12"/>
        <Setter Property="FontFamily" Value="Tahoma"/>
        <Setter Property="Margin" Value="5,2,5,2"/>
        <Setter Property="Height" Value="24"/>
        <Setter Property="Width" Value="70"/>
    </Style>

    <Style x:Key="editRowButton" TargetType="Button">
        <Setter Property="Width" Value="25"/>
        <Setter Property="Height" Value="25"/>
        <Setter Property="Content" Value="..."/>
        <Setter Property="Visibility" Value="Hidden"/>
    </Style>

    <LinearGradientBrush x:Key="mainBackground" EndPoint="0.5,1" StartPoint="0.5,0">
        <GradientStop Color="#FF868484" Offset="0" />
        <GradientStop Color="#FFE2E2E2" Offset="0.1" />
        <GradientStop Color="#FFE4E4E4" Offset="0.882" />
        <GradientStop Color="#FFBAAEAE" Offset="0.995" />
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="mainBackgroundInverted" EndPoint="0.5,1" StartPoint="0.5,0">
        <GradientStop Color="#FFBAAEAE" Offset="0" />
        <GradientStop Color="#FFE4E4E4" Offset="0.22" />
        <GradientStop Color="#FFE2E2E2" Offset="0.882" />
        <GradientStop Color="#FF868484" Offset="0.995" />
    </LinearGradientBrush>

    <Color x:Key="color1">Black</Color>
    <Color x:Key="color2">#FF2D6076</Color>
    <SolidColorBrush x:Key="SoftBlackBrushKey" Color="Black" Opacity="0.7"/>
    <SolidColorBrush x:Key="DarkBlueBrushKey" Color="#FF2D6076"/>
    <SolidColorBrush x:Key="BlueBrushKey" Color="#D2DFEB"/>
    <SolidColorBrush x:Key="PageBackgroundBrushKey" Opacity=".2" Color="White"/>
    <SolidColorBrush x:Key="BrownLightSelectedRow" Color="#FCF2E9BA"/>

    <LinearGradientBrush x:Key="titleBackground" EndPoint="0.5,1" StartPoint="0.5,0">
        <GradientStop Color="{StaticResource color1}" Offset=".65"/>
        <GradientStop Color="{StaticResource color2}"/>
    </LinearGradientBrush>
    <Style x:Key="titleLabelStyle" TargetType="Label">
        <Setter Property="Background" Value="{StaticResource titleBackground}"/>
        <Setter Property="FontSize" Value="14"/>
        <Setter Property="FontWeight" Value="Bold"/>
        <Setter Property="Foreground" Value="White"/>
    </Style>
    <Style  x:Key="{x:Type TextBox}" TargetType="TextBox">
        <Setter Property="ToolTipService.ShowDuration" Value="10000"/>
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="HorizontalContentAlignment" Value="Left" />
        <Setter Property="VerticalContentAlignment" Value="Top" />
        <Setter Property="BorderThickness" Value="1.4,1.4,1,1"/>
        <Setter Property="BorderBrush" Value="Silver"/>
        <Setter Property="Validation.ErrorTemplate">
            <Setter.Value>
                <ControlTemplate>
                    <!--<ControlTemplate.Triggers>
                            <DataTrigger Binding="{Binding ElementName=popUpMsg,Path=IsOpen}" Value="True">
                                <BeginStoryboard>
                                    <Storyboard >
                                        <BooleanAnimationUsingKeyFrames Storyboard.TargetName="popUpMsg" Storyboard.TargetProperty="IsOpen" FillBehavior="HoldEnd">
                                            <DiscreteBooleanKeyFrame KeyTime="00:00:02"  Value="True" />
                                        </BooleanAnimationUsingKeyFrames>
                                    </Storyboard>
                                </BeginStoryboard>
                            </DataTrigger>
                        </ControlTemplate.Triggers>-->
                    <Grid HorizontalAlignment="Center" VerticalAlignment="Center">
                        <Border BorderBrush="OrangeRed" Name="errorBorder" BorderThickness="0" CornerRadius="6">
                            <AdornedElementPlaceholder Name="MyAdorner">
                            </AdornedElementPlaceholder>
                        </Border>
                        <!--<Popup x:Name="popUpMsg" StaysOpen="False" PopupAnimation="Slide" 
                                   IsOpen="{Binding ElementName=MyAdorner, Path=AdornedElement.(Validation.HasError), Mode=OneWay}" 
                                   AllowsTransparency="True" Placement="Bottom" 
                                   PlacementTarget="{Binding ElementName=errorBorder}"
                                   HorizontalOffset="10">
                            <Grid Grid.Column="1">
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="8"/>
                                    <RowDefinition/>
                                </Grid.RowDefinitions>
                                <Border BorderThickness="2" Grid.Row="1" CornerRadius="2" BorderBrush="Gray" Padding="2">
                                    <Border.Background>
                                        <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                                            <GradientStop Color="#FFB1B1B1" Offset="0" />
                                            <GradientStop Color="White" Offset="1" />
                                        </LinearGradientBrush>
                                    </Border.Background>
                                    <TextBlock Foreground="OrangeRed" FontSize="14" VerticalAlignment="Center" 
                                        Text="{Binding ElementName=MyAdorner, Path=AdornedElement.(Validation.Errors)[0].ErrorContent}"/>
                                </Border>
                                <Path Fill="#FFB1B1B1" x:Name="arrow" Stretch="Fill" Stroke="Gray" StrokeThickness="2" HorizontalAlignment="Left" Margin="30,0,0,-2" Width="20" Height="10" Data="M190,84 C203.27403,59.418466 189.83333,83.833001 217.75,33.249609 219.15884,30.696864 246.16667,48.831883 305.83333,84.833012"/>
                            </Grid>
                        </Popup>-->
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <Grid>
                        <Border x:Name="BorderBase" Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" CornerRadius="6" />
                        <TextBlock VerticalAlignment="Center" Margin="10,0,0,0" x:Name="TextPrompt" Text="{TemplateBinding Tag}" Visibility="Collapsed" Focusable="False" IsHitTestVisible="False"  Foreground="Silver"/>
                        <ScrollViewer Margin="2,2,2,2" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" x:Name="PART_ContentHost" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsFocused" Value="False"></Condition>
                                <Condition Property="Text" Value=""></Condition>
                            </MultiTrigger.Conditions>
                            <MultiTrigger.Setters>
                                <Setter Property="Visibility" TargetName="TextPrompt" Value="Visible"></Setter>
                            </MultiTrigger.Setters>
                        </MultiTrigger>
                        <Trigger Property="IsFocused" Value="True">
                            <Setter Property="BorderThickness" TargetName="BorderBase" Value="2.4,2.4,1,1"></Setter>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" Value="DimGray" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsFocused" Value="True">
                <Setter Property="Background" Value="#FCF2E9BA"/>
                <Setter Property="FontWeight" Value="Bold"/>
            </Trigger>
            <Trigger Property="Validation.HasError" Value="true">
                <Setter Property="ToolTip" Value="{Binding RelativeSource={x:Static RelativeSource.Self}, Path=(Validation.Errors)[0].ErrorContent}"/>
                <Setter Property="Focusable" Value="True"/>
                <Setter Property="Background" Value="#FFF0A6A6"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    
    <Style x:Key="{x:Type PasswordBox}" TargetType="PasswordBox">
        <Style.Triggers>
            <Trigger Property="IsFocused" Value="True">
                <Setter Property="Background" Value="#FCF2E9BA"/>
                <Setter Property="FontWeight" Value="Bold"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="MLB_MenuItem" TargetType="{x:Type MenuItem}">
        <Setter Property="Foreground" Value="{Binding Path=Foreground, RelativeSource={RelativeSource AncestorType={x:Type Menu}}}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type MenuItem}">
                    <Border x:Name="Border"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition x:Name="Col0" MinWidth="17" Width="Auto" SharedSizeGroup="MenuItemIconColumnGroup"/>
                                <ColumnDefinition Width="Auto" SharedSizeGroup="MenuTextColumnGroup"/>
                                <ColumnDefinition Width="Auto" SharedSizeGroup="MenuItemIGTColumnGroup"/>
                                <ColumnDefinition x:Name="Col3" Width="14"/>
                            </Grid.ColumnDefinitions>

                            <!-- ContentPresenter to show an Icon if needed -->
                            <ContentPresenter Grid.Column="0" Margin="4,0,6,0" x:Name="Icon" VerticalAlignment="Center" ContentSource="Icon"/>

                            <!-- Glyph is a checkmark if needed for a checkable menu -->
                            <Grid Grid.Column="0" Visibility="Hidden" Margin="4,0,6,0" x:Name="GlyphPanel" VerticalAlignment="Center">
                                <Path x:Name="GlyphPanelpath" VerticalAlignment="Center" Fill="{TemplateBinding Foreground}" Data="M0,2 L0,4.8 L2.5,7.4 L7.1,2.8 L7.1,0 L2.5,4.6 z" FlowDirection="LeftToRight"/>
                            </Grid>

                            <!-- Content for the menu text etc -->
                            <ContentPresenter Grid.Column="1"
                                          Margin="{TemplateBinding Padding}"
                                          x:Name="HeaderHost" VerticalAlignment="Center"
                                          RecognizesAccessKey="True"
                                          ContentSource="Header"/>

                            <!-- Content for the menu IGT -->
                            <ContentPresenter Grid.Column="2"
                                          Margin="8,1,8,1"
                                          x:Name="IGTHost"
                                          ContentSource="InputGestureText"
                                          VerticalAlignment="Center"/>

                            <!-- Arrow drawn path which points to the next level of the menu -->
                            <Grid Grid.Column="3" Margin="4,0,6,0" x:Name="ArrowPanel" VerticalAlignment="Center">
                                <Path x:Name="ArrowPanelPath" HorizontalAlignment="Right" VerticalAlignment="Center" Fill="{TemplateBinding Foreground}" Data="M0,0 L0,8 L4,4 z"/>
                            </Grid>

                            <!-- The Popup is the body of the menu which expands down or across depending on the level of the item -->
                            <Popup IsOpen="{Binding Path=IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}}" Placement="Right" x:Name="SubMenuPopup" Focusable="false" PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}">
                                <Border x:Name="SubMenuBorder" BorderBrush="{Binding Path=Foreground, RelativeSource={RelativeSource AncestorType={x:Type Menu}}}" BorderThickness="1" Padding="2,2,2,2">
                                    <Grid x:Name="SubMenu" Grid.IsSharedSizeScope="True">
                                        <!-- StackPanel holds children of the menu. This is set by IsItemsHost=True -->
                                        <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Cycle"/>
                                    </Grid>
                                </Border>
                            </Popup>
                        </Grid>
                    </Border>

                    <!-- These triggers re-configure the four arrangements of MenuItem to show different levels of menu via Role -->
                    <ControlTemplate.Triggers>
                        <!-- Role = TopLevelHeader : this is the root menu item in a menu; the Popup expands down -->
                        <Trigger Property="Role" Value="TopLevelHeader">
                            <Setter Property="Padding" Value="6,1,6,1"/>
                            <Setter Property="Placement" Value="Bottom" TargetName="SubMenuPopup"/>
                            <Setter Property="MinWidth" Value="0" TargetName="Col0"/>
                            <Setter Property="Width" Value="Auto" TargetName="Col3"/>
                            <Setter Property="Visibility" Value="Collapsed" TargetName="Icon"/>
                            <Setter Property="Visibility" Value="Collapsed" TargetName="GlyphPanel"/>
                            <Setter Property="Visibility" Value="Collapsed" TargetName="IGTHost"/>
                            <Setter Property="Visibility" Value="Collapsed" TargetName="ArrowPanel"/>
                        </Trigger>

                        <!-- Role = TopLevelItem :  this is a child menu item from the top level without any child items-->
                        <Trigger Property="Role" Value="TopLevelItem">
                            <Setter Property="Padding" Value="6,1,6,1"/>
                            <Setter Property="Visibility" Value="Collapsed" TargetName="ArrowPanel"/>
                        </Trigger>

                        <!-- Role = SubMenuHeader : this is a child menu item which does not have children -->
                        <Trigger Property="Role" Value="SubmenuHeader">
                            <Setter Property="DockPanel.Dock" Value="Top"/>
                            <Setter Property="Padding" Value="0,2,0,2"/>
                        </Trigger>

                        <!-- Role = SubMenuItem : this is a child menu item which has children-->
                        <Trigger Property="Role" Value="SubmenuItem">
                            <Setter Property="DockPanel.Dock" Value="Top"/>
                            <Setter Property="Padding" Value="0,2,0,2"/>
                            <Setter Property="Visibility" Value="Collapsed" TargetName="ArrowPanel"/>
                        </Trigger>
                        <Trigger Property="IsSuspendingPopupAnimation" Value="true">
                            <Setter Property="PopupAnimation" Value="None" TargetName="SubMenuPopup"/>
                        </Trigger>

                        <!-- If no Icon is present the we collapse the Icon Content -->
                        <Trigger Property="Icon" Value="{x:Null}">
                            <Setter Property="Visibility" Value="Collapsed" TargetName="Icon"/>
                        </Trigger>

                        <!-- The GlyphPanel contains the CheckMark -->
                        <Trigger Property="IsChecked" Value="true">
                            <Setter Property="Visibility" Value="Visible" TargetName="GlyphPanel"/>
                            <Setter Property="Visibility" Value="Collapsed" TargetName="Icon"/>
                        </Trigger>

                        <!-- Using the system colors for the Menu Highlight and IsEnabled-->
                        <Trigger Property="IsHighlighted" Value="true">
                            <Setter Property="Background" Value="LightGray" TargetName="Border"/>
                            <Setter Property="Foreground" Value="Black"/>
                        </Trigger>

                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="LightGray"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="MenuItem" x:Key="{x:Type MenuItem}">
        <Setter Property="FontWeight" Value="Bold"/>
        <Setter Property="Foreground" Value="White"/>
        <Setter Property="FontSize" Value="18"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Background" Value="{StaticResource SoftBlackBrushKey}"/>
        <Setter Property="BorderBrush" Value="{StaticResource DarkBlueBrushKey}"/>
        <Style.Triggers>
            <Trigger Property="IsHighlighted" Value="true">
                <Setter Property="Foreground" Value="{StaticResource SoftBlackBrushKey}"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Foreground" Value="LightGray"/>
            </Trigger>
            <Trigger Property="IsSubmenuOpen" Value="true">
                <Setter Property="Foreground" Value="{StaticResource DarkBlueBrushKey}"/>
            </Trigger>

        </Style.Triggers>

    </Style>

    <Style x:Key="homeButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="FontFamily" Value="Tahoma"/>
        <Setter Property="FontSize" Value="16"/>
        <Setter Property="FontWeight" Value="Bold"/>
        <Setter Property="Foreground" Value="Black"/>
        <Setter Property="Margin" Value="2"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <ControlTemplate.Resources>
                        <SolidColorBrush x:Key="borderColor" Color="#FF908888"/>
                        <SolidColorBrush x:Key="mouseOverBack" Color="#FFCBDBE5"/>
                    </ControlTemplate.Resources>
                    <Grid Height="{TemplateBinding Height}">
                        <Border Name="borderBack" Padding="2" Background="WhiteSmoke" CornerRadius="4">
                            <Border.Effect>
                                <DropShadowEffect/>
                            </Border.Effect>
                            <Grid Width="48" Height="55">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width=".1*"/>
                                    <ColumnDefinition/>
                                    <ColumnDefinition Width=".1*"/>
                                </Grid.ColumnDefinitions>
                                <Border x:Name="border1" Grid.Column="1" BorderBrush="{StaticResource borderColor}" BorderThickness="1" CornerRadius="3">
                                    <Border.Background>
                                        <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                                            <GradientStop Color="#FFF4FCFA" Offset="0.258"/>
                                            <GradientStop Color="#FFF4F4F4" Offset="0"/>
                                            <GradientStop Color="White" Offset="1"/>
                                        </LinearGradientBrush>
                                    </Border.Background>
                                    <Border x:Name="rectangle" Background="WhiteSmoke" Margin="0,-1,-1,-1.2" BorderBrush="{StaticResource borderColor}" BorderThickness="1,0,0,1" HorizontalAlignment="Right" VerticalAlignment="Top" Width="12.5" Height="12.333" CornerRadius="0,0,0,3">
                                        <Path x:Name="path" Stretch="Fill" Stroke="{StaticResource borderColor}" StrokeThickness="1" HorizontalAlignment="Stretch" Margin="-0.833,-0.167,-0.125,-0.917" Width="Auto" Data="M0.16666667,-0.16633335 L11.625,11.25"/>
                                    </Border>
                                </Border>
                            </Grid>
                        </Border>
                        <ContentPresenter Name="content" Margin="3" Grid.ColumnSpan="3" Grid.Row="1" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" RecognizesAccessKey="True"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsFocused" Value="True">
                            <Setter Property="Background" TargetName="borderBack" Value="LightGray"/>
                            <Setter Property="Background" TargetName="rectangle" Value="LightGray"/>
                        </Trigger>
                        <Trigger Property="IsDefaulted" Value="True"/>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Width" TargetName="rectangle" Value="15.5"/>
                            <Setter Property="Height" TargetName="rectangle" Value="15.333"/>
                            <Setter Property="Background" TargetName="borderBack" Value="{StaticResource mouseOverBack}"/>
                            <Setter Property="Background" TargetName="rectangle" Value="{StaticResource mouseOverBack}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" TargetName="border1">
                                <Setter.Value>
                                    <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                                        <GradientStop Color="#FF868686" Offset="0"/>
                                        <GradientStop Color="#FFC1D8D3" Offset="0.258"/>
                                        <GradientStop Color="#FFE4E4E4" Offset="1"/>
                                    </LinearGradientBrush>
                                </Setter.Value>
                            </Setter>
                            <Setter Property="BorderBrush" TargetName="border1" Value="#FF805A5A"/>
                            <Setter Property="BorderBrush" TargetName="rectangle" Value="#FF805A5A"/>
                            <Setter Property="Stroke" TargetName="path" Value="#FF805A5A"/>
                            <Setter Property="Background" TargetName="rectangle" Value="#FFFFFDFD"/>
                            <Setter Property="Background" TargetName="borderBack" Value="#FFFFFDFD"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" TargetName="border1">
                                <Setter.Value>
                                    <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                                        <GradientStop Color="#FF868686" Offset="0"/>
                                        <GradientStop Color="#FFC1D8D3" Offset="0.258"/>
                                        <GradientStop Color="Gray" Offset="1"/>
                                    </LinearGradientBrush>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="homeButtonStyle2" TargetType="Button">
        <Setter Property="Margin" Value="5"/>
        <Setter Property="FontFamily" Value="Tahoma"/>
        <Setter Property="FontSize" Value="16"/>
        <Setter Property="FontWeight" Value="Bold"/>
        <Setter Property="Foreground" Value="White"/>
        <Setter Property="Height" Value="40"/>
        <Setter Property="MinWidth" Value="130"/>
        <Setter Property="Padding" Value="5"/>
        <Setter Property="Background">
            <Setter.Value>
                <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                    <GradientStop Color="#FF2D6076" Offset="0" />
                    <GradientStop Color="#FF2D6076" Offset=".7" />
                    <GradientStop Color="#FCF2E9BA" Offset="1" />
                </LinearGradientBrush>
            </Setter.Value>
        </Setter>
        <Setter Property="RenderTransformOrigin" Value="0.5,0.5"/>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="true">
                <Setter Property="Foreground" Value="{DynamicResource DarkBlueBrushKey}"/>
                <Setter Property="Background" Value="White"/>
            </Trigger>
        </Style.Triggers>

    </Style>

    <Style TargetType="DataGrid" x:Key="dataGridStyle">
        <Setter Property="EnableRowVirtualization" Value="True"/>
        <Setter Property="HorizontalAlignment" Value="Stretch"/>
        <Setter Property="VerticalAlignment" Value="Stretch"/>
        <Setter Property="IsReadOnly" Value="True"/>
        <Setter Property="SelectionUnit" Value="FullRow"/>
        <Setter Property="SelectionMode" Value="Single"/>
        <Setter Property="AutoGenerateColumns" Value="False"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="RowDetailsVisibilityMode" Value="Collapsed"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="FontSize" Value="15"/>
        <Setter Property="FontWeight" Value="Normal"/>
        <Setter Property="ClipboardCopyMode" Value="IncludeHeader"/>
        <Setter Property="GridLinesVisibility" Value="Horizontal"/>
        <Setter Property="HorizontalGridLinesBrush" Value="#FF2D6076"/>
        <Setter Property="Foreground" Value="Black"/>
        <Setter Property="AlternatingRowBackground" Value="#D2DFEB"/>
        <Setter Property="CellStyle">
            <Setter.Value>
                <Style TargetType="DataGridCell">
                    <Setter Property="IsTabStop" Value="False"/>
                    <Style.Triggers>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter Property="Background" Value="#FCF2E9BA"/>
                            <Setter Property="Foreground" Value="Black"/>
                            <Setter Property="FontWeight" Value="Bold"/>
                        </Trigger>
                    </Style.Triggers>
                </Style>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsReadOnly" Value="True">
                <Setter Property="Foreground" Value="Black"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="dataGridColumnHeaderStyle" TargetType="DataGridColumnHeader">
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="FontWeight" Value="Bold"/>
    </Style>
    <Storyboard x:Key="popupStoryBoard" Duration="00:00:00.5">
        <DoubleAnimationUsingKeyFrames Duration="00:00:00.5" Storyboard.TargetProperty="RenderTransform.(ScaleTransform.ScaleX)">
            <LinearDoubleKeyFrame KeyTime="00:00:00.0" Value="0"/>
            <LinearDoubleKeyFrame KeyTime="00:00:00.5" Value="1"/>
        </DoubleAnimationUsingKeyFrames>
        <DoubleAnimationUsingKeyFrames Duration="00:00:01" Storyboard.TargetProperty="RenderTransform.(ScaleTransform.ScaleY)">
            <LinearDoubleKeyFrame KeyTime="00:00:00.0" Value="0"/>
            <LinearDoubleKeyFrame KeyTime="00:00:00.5" Value="1"/>
        </DoubleAnimationUsingKeyFrames>
    </Storyboard>
</ResourceDictionary>